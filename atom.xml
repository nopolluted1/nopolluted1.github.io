<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nopolluted1.github.io</id>
    <title>Gridea</title>
    <updated>2023-10-27T09:28:47.030Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nopolluted1.github.io"/>
    <link rel="self" href="https://nopolluted1.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://nopolluted1.github.io/images/avatar.png</logo>
    <icon>https://nopolluted1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[队列]]></title>
        <id>https://nopolluted1.github.io/post/dui-lie-s/</id>
        <link href="https://nopolluted1.github.io/post/dui-lie-s/">
        </link>
        <updated>2023-10-17T05:05:17.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一基础">一.基础</h4>
<p>特点：先入先出，后入后出</p>
<p>方法：</p>
<p>​        1、创建队列对象。例如：ArrayDeque、LinkedList等。</p>
<p>2、入队操作。将元素添加到队列的末尾处，使用offer()方法。</p>
<p>3、出队操作。从队列的头部移除并返回元素，使用poll()方法。</p>
<p>4、peek()方法：查看队首元素。如果队列为空，则返回null。</p>
<p>5、isEmpty()方法。用于判断队列是否为空，空则返回true。</p>
<p>6、获取队列的大小，采用size()方法。</p>
<p>7、清除队列内的元素，采用clear()方法。</p>
<h4 id="二链表实现单向环形带哨兵">二.链表实现（单向环形带哨兵）</h4>
<ol>
<li>队列初始化，<code>head</code> 和 <code>tail</code>都指向同一个 <code>初始化节点</code>，如果有元素入队列，移动 <code>tail</code> 指针即可</li>
</ol>
<img src="C:\Users\明天会更好\AppData\Roaming\Typora\typora-user-images\image-20231017114455247.png" style="zoom: 80%;" />
<pre><code class="language-java">import java.util.Iterator;
import java.util.Queue;

public class LinkedListQueue&lt;E&gt; implements Iterable&lt;E&gt;{
        private static class Node&lt;E&gt; {
            E value;
            Node&lt;E&gt; next;

            public Node(E value, Node&lt;E&gt; next) {
                this.value = value;
                this.next = next;
            }
        }

        Node&lt;E&gt; head = new Node&lt;&gt;(null, null);
        Node&lt;E&gt; tail = head;
        private int size;                  //节点数
        private int capacity = Integer.MAX_VALUE;

        public LinkedListQueue(int capacity) {
            this.capacity = capacity;
            tail.next = head;
        }

        public LinkedListQueue() {
            tail.next = head;
        }

        public boolean offer(E value){
            if(isFull()){
                return false;
            }
            Node&lt;E&gt; added = new Node&lt;&gt;(value, head);
            tail.next = added;
            tail = added;
            size++;
            return true;
        }

        public E poll(){
            if(isEmpty()){
                return null;
            }
            Node&lt;E&gt; first = head.next;
            head.next = first.next;
            if(first == tail){
                tail = head;
            }
            size--;
            return first.value;
        }

        public E peek(){
            if(isEmpty()){
                return null;
            }
            return head.next.value;
        }

        public boolean isEmpty(){
            if(head.next == null){
                return true;
            }
            return false;
        }

        public boolean isFull(){
            return size == capacity;
//          return tail + 1 == head;
        }

        public Iterator&lt;E&gt; iterator(){
            return new Iterator&lt;E&gt;() {
                Node&lt;E&gt; p = head.next;                         //设置指针遍历
                @Override
                public boolean hasNext() {
                    return p != head;                 //循环结束条件
                }

                @Override
                public E next() {
                    E value = p.value;
                    p = p.next;
                    return value;
                }
            };
        }
    }
</code></pre>
<h4 id="三环形数组实现">三.环形数组实现</h4>
<ol>
<li>
<p>定义head，tail两个指针</p>
</li>
<li>
<p>head指针指向头一个元素</p>
</li>
<li>
<p>tail指针指向最后一个元素的下一个位置，也就是待插入的位置</p>
</li>
<li>
<p>初始时，head和tail共同指向第一个位置</p>
</li>
<li>
<p>判断队满：（tail + 1）% length == head</p>
</li>
<li>
<p>判断队空：head == tail</p>
<pre><code class="language-java">import java.util.Iterator;

public class ArrayQueue1&lt;E&gt; implements Iterable&lt;E&gt;  {
    private E[] array;
    private int head = 0;
    private int tail = 0;
    private int capacity;

    @SuppressWarnings(&quot;all&quot;)
    public ArrayQueue1(int capacity) {
        array = (E[]) new Object[capacity + 1];
    }

    public boolean offer(E value){
        if(isFull()){
            return false;
        }
        array[tail] = value;
        tail = (tail + 1) % array.length;
        return true;
    }

    public E poll(){
        if(isEmpty()){
            return null;
        }
        E value = array[head];
        head = (head + 1) % array.length;
        return value;
    }

    public E peek(){
        if(isEmpty()){
            return null;
        }
        return array[head];
    }

    public boolean isEmpty(){
        return head == tail;
    }

    public boolean isFull(){
        return (tail + 1) % array.length == head;
    }

    public Iterator&lt;E&gt; iterator(){
        return new Iterator&lt;E&gt;() {
            int p = head;                         //设置指针遍历
            @Override
            public boolean hasNext() {
                return p != tail;                 //循环结束条件
            }

            @Override
            public E next() {
                E value = array[p];
                p = (p + 1) % array.length;
                return value;
            }
        };  
    }
}

</code></pre>
</li>
</ol>
<h4 id="四二叉树实现">四.二叉树实现</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[栈]]></title>
        <id>https://nopolluted1.github.io/post/dui-lie/</id>
        <link href="https://nopolluted1.github.io/post/dui-lie/">
        </link>
        <updated>2023-10-17T05:00:29.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一-基础">一、基础</h4>
<h4 id="二-数组实现">二、数组实现</h4>
<h4 id="三-链表实现">三、链表实现</h4>
<pre><code>import java.util.Stack;
import java.util.Iterator;


public class LinkedListStack&lt;E&gt; implements Iterable&lt;E&gt; {

    static class Node&lt;E&gt;{
        E value;
        Node&lt;E&gt; next;

        public Node(E value, Node&lt;E&gt; next) {
            this.value = value;
            this.next = next;
        }
    }
    
    private int capacity;
    private int size;
    private Node&lt;E&gt; head = new Node&lt;E&gt;(null, null);

    public LinkedListStack(int capacity) {
        this.capacity = capacity;
    }
    
    public boolean push(E value) {
        if (isFull()) {
            return false;
        }
        head.next = new Node&lt;&gt;(value, head.next);
        size++;
        return true;
    }

    public E pop() {
        if (isEmpty()) {
            return null;
        }
        Node&lt;E&gt; first = head.next;
        head.next = first.next;
        size--;
        return first.value;
    }

    public E peek() {
        if (isEmpty()) {
            return null;
        }
        Node&lt;E&gt; first = head.next;
        return first.value;
    }
    
    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    @Override
    public Iterator&lt;E&gt; iterator() {
        return new Iterator&lt;E&gt;() {
            Node&lt;E&gt; p = head.next;
            @Override
            public boolean hasNext() {
                return p != null;
            }

            @Override
            public E next() {
                E value = p.value;
                p = p.next;
                return value;
            }
        };
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://nopolluted1.github.io/post/sadas/</id>
        <link href="https://nopolluted1.github.io/post/sadas/">
        </link>
        <updated>2023-09-15T14:59:28.000Z</updated>
        <content type="html"><![CDATA[<p>欢迎来到小橘子的博客</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://nopolluted1.github.io/post/hello-gridea/</id>
        <link href="https://nopolluted1.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>