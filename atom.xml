<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nopolluted1.github.io</id>
    <title>Gridea</title>
    <updated>2023-11-01T05:15:48.438Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://nopolluted1.github.io"/>
    <link rel="self" href="https://nopolluted1.github.io/atom.xml"/>
    <subtitle>欢迎来到小橘子的博客</subtitle>
    <logo>https://nopolluted1.github.io/images/avatar.png</logo>
    <icon>https://nopolluted1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[堆]]></title>
        <id>https://nopolluted1.github.io/post/dui/</id>
        <link href="https://nopolluted1.github.io/post/dui/">
        </link>
        <updated>2023-11-01T05:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-堆介绍">一. 堆介绍</h3>
<p>只要满足以下两点，它就是一个堆：</p>
<blockquote>
<p><strong>堆是一个完全二叉树。</strong></p>
<p>完全二叉树要求，除了最后一层，其他层的节点个数都是满的，最后一层的节点都靠左排列，自然堆也具有完全二叉树的所有性质。</p>
</blockquote>
<blockquote>
<p><strong>堆中每一个节点的值都必须大于等于（或小于等于）其子树中每个节点的值。</strong></p>
</blockquote>
<p><strong>每个结点的值都大于或等于其左右孩子结点的值</strong>，我们叫做“大顶堆”。</p>
<p><strong>每个结点的值都小于或等于其左右孩子结点的值</strong>，我们叫做“小顶堆”。</p>
<h3 id="二-堆方法">二. 堆方法</h3>
<pre><code class="language-java">public interface Heap {

    boolean offer(int offered);

    int poll();

    int poll(int index);

    int peek();

    void replace(int replaced);

}
</code></pre>
<h3 id="三-大顶堆">三. 大顶堆</h3>
<pre><code>import java.util.Arrays;

public class MaxHeap implements Heap{
    int[] array;
    int size;

    public MaxHeap(int capacity){
        this.array = new int[capacity];
    }
    
     public MaxHeap(int[] array){
        this.array = array;
        this.size = array.length;
        heapify();
    }

    private void down(int parent){                     //下潜
        int left = parent * 2 + 1;
        int right = left + 1;
        int max = parent;
        if(left &lt; size &amp;&amp; array[left] &gt; array[max]){
            max = left;
        }
        if(right &lt; size &amp;&amp; array[right] &gt; array[max]){
            max = right;
        }
        if(max != parent){
            swap(max,parent);
            down(max);
        }
    }

    private void swap(int i, int j){                    //交换堆内节点元素
        int t = array[i];
        array[i] = array[j];
        array[j] = t;
    }

    private void heapify(){                             //建堆
        for(int i = size / 2 - 1; i &gt;= 0; i--){
            down(i);
        }
    }

    private void up(int offered){                       //上升
        int child = size;
        while (size &gt; 0){
            int parent = (child - 1) / 2;
            if(offered &gt; array[parent]){
                array[child] = array[parent];
            } else {
                break;
            }
            child = parent;
        }
        array[child] = offered;
    }

    @Override
    public boolean offer(int offered) {
        if(size == array.length){
            return false;
        }
        up(offered);
        size++;
        return true;
    }

    @Override
    public int poll() {
        int top = array[0];
        swap(0, size - 1);
        size--;
        down(0);
        return top;
    }

    @Override
    public int poll(int index) {
        int deleted = array[index];
        swap(index, size - 1);
        size--;
        down(index);
        return deleted;
    }

    @Override
    public int peek() {
        return array[0];
    }

    @Override
    public void replace(int replaced) {
        array[0] = replaced;
        down(0);
    }
   

    public static void main(String[] args) {                     //测试
        int[] array = {1, 2, 3, 4, 5, 6, 7};
        MaxHeap maxHeap = new MaxHeap(array);
        System.out.println(Arrays.toString(maxHeap.array));
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树的两种遍历方式]]></title>
        <id>https://nopolluted1.github.io/post/er-cha-shu-de-liang-chong-bian-li-fang-shi/</id>
        <link href="https://nopolluted1.github.io/post/er-cha-shu-de-liang-chong-bian-li-fang-shi/">
        </link>
        <updated>2023-11-01T03:42:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-创建树类">一.  创建树类</h3>
<pre><code class="language-java">public class TreeNode {
    public int val;
    public TreeNode left;
    public TreeNode right;

    public TreeNode(int val) {
        this.val = val;
    }

    public TreeNode(TreeNode left, int val, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }

    @Override
    public String toString() {
        return &quot;TreeNode{&quot; +
                &quot;val=&quot; + val +
                &quot;, left=&quot; + left +
                &quot;, right=&quot; + right +
                '}';
    }
}
</code></pre>
<h3 id="二-递归遍历">二. 递归遍历</h3>
<pre><code class="language-java">//递归遍历 二叉树 （前序、中序、后序）
//                            1                                      // 前序： 1 2 4 3 5 6
//                      2            3                               // 中序： 4 2 1 5 3 6
//                  4             5     6                            // 后序： 4 2 5 6 3 1

public class BinaryTree1 {

    public static void main(String[] args) {
        
        TreeNode root = new TreeNode(new TreeNode(new TreeNode(4), 2, null),
                1,
                new TreeNode(new TreeNode(5), 3, new TreeNode(6)));

        preOrder(root);                         //测试
        System.out.println();
        inOrder(root);
        System.out.println();
        postOrder(root);
        System.out.println();
    }

        static void preOrder (TreeNode node){
            if (node == null) {
                return;
            }
            System.out.println(node.val);
            preOrder(node.left);
            preOrder(node.right);
        }

        static void inOrder (TreeNode node) {
            if (node == null) {
                return;
            }
            inOrder(node.left);
            System.out.println(node.val);
            inOrder(node.right);
        }

        static void postOrder (TreeNode node) {
            if (node == null) {
                return;
            }
            postOrder(node.left);
            postOrder(node.right);
            System.out.println(node.val);
        }
    }

</code></pre>
<h3 id="三-非递归遍历">三. 非递归遍历</h3>
<pre><code class="language-java">//非递归遍历 二叉树 （前序、中序、后序）
//                            1                                      // 前序： 1 2 4 3 5 6
//                      2            3                               // 中序： 4 2 1 5 3 6
//                  4             5     6                            // 后序： 4 2 5 6 3 1

public class BinaryTree2 {

    public static void main(String[] args) {
        
        TreeNode root = new TreeNode(new TreeNode(new TreeNode(4), 2, null),
                1,
                new TreeNode(new TreeNode(5), 3, new TreeNode(6)));

        TreeNode pop = null;
        TreeNode cur = root;

        LinkedListStack&lt;TreeNode&gt; stack = new LinkedListStack&lt;&gt;(8);

        while (!stack.isEmpty() || cur != null) {
            if (cur != null) {
                stack.push(cur);
                System.out.println(&quot;前:&quot; +  cur.val);
                cur = cur.left;
            } else {
                TreeNode peek = stack.peek();
                if (peek.right == null) {
                    System.out.println(&quot;中:&quot; +  peek.val);
                    pop = stack.pop();
                    System.out.println(&quot;后:&quot; +  pop.val);
                } else if (peek.right == pop) {
                    pop = stack.pop();
                    System.out.println(&quot;后:&quot; +  pop.val);
                } else {
                    System.out.println(&quot;中:&quot; +  peek.val);
                    cur = peek.right;
                }
            }
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[队列]]></title>
        <id>https://nopolluted1.github.io/post/dui-lie-s/</id>
        <link href="https://nopolluted1.github.io/post/dui-lie-s/">
        </link>
        <updated>2023-10-17T05:05:17.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一基础">一.基础</h4>
<p>特点：先入先出，后入后出</p>
<p>方法：</p>
<p>​        1、创建队列对象。例如：ArrayDeque、LinkedList等。</p>
<p>2、入队操作。将元素添加到队列的末尾处，使用offer()方法。</p>
<p>3、出队操作。从队列的头部移除并返回元素，使用poll()方法。</p>
<p>4、peek()方法：查看队首元素。如果队列为空，则返回null。</p>
<p>5、isEmpty()方法。用于判断队列是否为空，空则返回true。</p>
<p>6、获取队列的大小，采用size()方法。</p>
<p>7、清除队列内的元素，采用clear()方法。</p>
<h4 id="二链表实现单向环形带哨兵">二.链表实现（单向环形带哨兵）</h4>
<ol>
<li>队列初始化，<code>head</code> 和 <code>tail</code>都指向同一个 <code>初始化节点</code>，如果有元素入队列，移动 <code>tail</code> 指针即可</li>
</ol>
<img src="https://img-blog.csdnimg.cn/1d3f8eb758544bf8b6fa8b2286f95517.png" referrerpolicy="no-referrer" style="zoom: 80%;" />
<pre><code class="language-java">import java.util.Iterator;
import java.util.Queue;

public class LinkedListQueue&lt;E&gt; implements Iterable&lt;E&gt;{
        private static class Node&lt;E&gt; {
            E value;
            Node&lt;E&gt; next;

            public Node(E value, Node&lt;E&gt; next) {
                this.value = value;
                this.next = next;
            }
        }

        Node&lt;E&gt; head = new Node&lt;&gt;(null, null);
        Node&lt;E&gt; tail = head;
        private int size;                  //节点数
        private int capacity = Integer.MAX_VALUE;

        public LinkedListQueue(int capacity) {
            this.capacity = capacity;
            tail.next = head;
        }

        public LinkedListQueue() {
            tail.next = head;
        }

        public boolean offer(E value){
            if(isFull()){
                return false;
            }
            Node&lt;E&gt; added = new Node&lt;&gt;(value, head);
            tail.next = added;
            tail = added;
            size++;
            return true;
        }

        public E poll(){
            if(isEmpty()){
                return null;
            }
            Node&lt;E&gt; first = head.next;
            head.next = first.next;
            if(first == tail){
                tail = head;
            }
            size--;
            return first.value;
        }

        public E peek(){
            if(isEmpty()){
                return null;
            }
            return head.next.value;
        }

        public boolean isEmpty(){
            if(head.next == null){
                return true;
            }
            return false;
        }

        public boolean isFull(){
            return size == capacity;
//          return tail + 1 == head;
        }

        public Iterator&lt;E&gt; iterator(){
            return new Iterator&lt;E&gt;() {
                Node&lt;E&gt; p = head.next;                         //设置指针遍历
                @Override
                public boolean hasNext() {
                    return p != head;                 //循环结束条件
                }

                @Override
                public E next() {
                    E value = p.value;
                    p = p.next;
                    return value;
                }
            };
        }
    }
</code></pre>
<h4 id="三环形数组实现">三.环形数组实现</h4>
<ol>
<li>
<p>定义head，tail两个指针</p>
</li>
<li>
<p>head指针指向头一个元素</p>
</li>
<li>
<p>tail指针指向最后一个元素的下一个位置，也就是待插入的位置</p>
</li>
<li>
<p>初始时，head和tail共同指向第一个位置</p>
</li>
<li>
<p>判断队满：（tail + 1）% length == head</p>
</li>
<li>
<p>判断队空：head == tail</p>
<pre><code class="language-java">import java.util.Iterator;

public class ArrayQueue1&lt;E&gt; implements Iterable&lt;E&gt;  {
    private E[] array;
    private int head = 0;
    private int tail = 0;
    private int capacity;

    @SuppressWarnings(&quot;all&quot;)
    public ArrayQueue1(int capacity) {
        array = (E[]) new Object[capacity + 1];
    }

    public boolean offer(E value){
        if(isFull()){
            return false;
        }
        array[tail] = value;
        tail = (tail + 1) % array.length;
        return true;
    }

    public E poll(){
        if(isEmpty()){
            return null;
        }
        E value = array[head];
        head = (head + 1) % array.length;
        return value;
    }

    public E peek(){
        if(isEmpty()){
            return null;
        }
        return array[head];
    }

    public boolean isEmpty(){
        return head == tail;
    }

    public boolean isFull(){
        return (tail + 1) % array.length == head;
    }

    public Iterator&lt;E&gt; iterator(){
        return new Iterator&lt;E&gt;() {
            int p = head;                         //设置指针遍历
            @Override
            public boolean hasNext() {
                return p != tail;                 //循环结束条件
            }

            @Override
            public E next() {
                E value = array[p];
                p = (p + 1) % array.length;
                return value;
            }
        };  
    }
}

</code></pre>
</li>
</ol>
<h4 id="四二叉树实现">四.二叉树实现</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[栈]]></title>
        <id>https://nopolluted1.github.io/post/dui-lie/</id>
        <link href="https://nopolluted1.github.io/post/dui-lie/">
        </link>
        <updated>2023-10-17T05:00:29.000Z</updated>
        <content type="html"><![CDATA[<h4 id="一-基础">一、基础</h4>
<h4 id="二-数组实现">二、数组实现</h4>
<h4 id="三-链表实现">三、链表实现</h4>
<pre><code>import java.util.Stack;
import java.util.Iterator;


public class LinkedListStack&lt;E&gt; implements Iterable&lt;E&gt; {

    static class Node&lt;E&gt;{
        E value;
        Node&lt;E&gt; next;

        public Node(E value, Node&lt;E&gt; next) {
            this.value = value;
            this.next = next;
        }
    }
    
    private int capacity;
    private int size;
    private Node&lt;E&gt; head = new Node&lt;E&gt;(null, null);

    public LinkedListStack(int capacity) {
        this.capacity = capacity;
    }
    
    public boolean push(E value) {
        if (isFull()) {
            return false;
        }
        head.next = new Node&lt;&gt;(value, head.next);
        size++;
        return true;
    }

    public E pop() {
        if (isEmpty()) {
            return null;
        }
        Node&lt;E&gt; first = head.next;
        head.next = first.next;
        size--;
        return first.value;
    }

    public E peek() {
        if (isEmpty()) {
            return null;
        }
        Node&lt;E&gt; first = head.next;
        return first.value;
    }
    
    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }

    @Override
    public Iterator&lt;E&gt; iterator() {
        return new Iterator&lt;E&gt;() {
            Node&lt;E&gt; p = head.next;
            @Override
            public boolean hasNext() {
                return p != null;
            }

            @Override
            public E next() {
                E value = p.value;
                p = p.next;
                return value;
            }
        };
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://nopolluted1.github.io/post/sadas/</id>
        <link href="https://nopolluted1.github.io/post/sadas/">
        </link>
        <updated>2023-09-15T14:59:28.000Z</updated>
        <content type="html"><![CDATA[<p>欢迎来到小橘子的博客</p>
]]></content>
    </entry>
</feed>